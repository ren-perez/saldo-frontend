// old dialog code
"use client"

import type React from "react"
import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
// import API from "@/lib/api" // Commented out unused import
import { Checkbox } from "@/components/ui/checkbox"

interface Goal {
    id: number
    name: string
    description: string
    ideal_amount?: number
    target_amount: number
    current_amount: number
    due_date?: string
    priority: number
    image?: string
    monthly_plan?: string
}

interface AllocationItem {
    id: number
    name: string
    ideal?: number
    expected?: number
    actual?: number
    essential: boolean
    group?: string
}

interface GoalItem {
    id: number
    name: string
    ideal?: number
    expected?: number
    actual?: number
    priority: number
}

interface MonthlyPlanData {
    id: number
    month: string
    income: {
        fixed: number
        variable: number
        total_expected: number
    }
    recurrentes: {
        items: AllocationItem[]
        total_expected: number
    }
    variables: {
        items: AllocationItem[]
        total_expected: number
    }
    goals: {
        items: GoalItem[]
    }
    remaining: {
        after_recurrentes: number
        after_variables: number
    }
}

interface GoalDialogProps {
    open: boolean
    onOpenChange: (open: boolean) => void
    onCreateGoal: (goal: Omit<Goal, "id" | "current_amount">) => void
    onUpdateGoal: (goal: Goal) => void
    editingGoal?: Goal | null
    mode: 'create' | 'edit'
    monthlyPlans: MonthlyPlanData[],
    focusMonthlyPlanSelect: any,
    onFocusHandled: any,
}

export function GoalDialog({
    open,
    onOpenChange,
    onCreateGoal,
    onUpdateGoal,
    editingGoal,
    monthlyPlans,
    mode,
    focusMonthlyPlanSelect,
    onFocusHandled,
}: GoalDialogProps) {
    const [formData, setFormData] = useState({
        name: "",
        description: "",
        target_amount: "",
        ideal_amount: "",
        due_date: "",
        priority: "2",
        image: null as File | null,
        current_amount: "",
        selected_plan_ids: [] as number[],
    })
    const monthlyPlanSelectRef = useRef<HTMLButtonElement>(null);

    // Reset form when dialog opens/closes or when editing goal changes
    useEffect(() => {
        if (open && mode === "edit" && editingGoal) {
            // Get the plan IDs directly from the editingGoal.monthly_plans array
            const assignedPlanIds = editingGoal.monthly_plans?.map(plan => plan.id) || [];

            setFormData({
                name: editingGoal.name,
                description: editingGoal.description,
                target_amount: editingGoal.target_amount.toString(),
                ideal_amount: editingGoal.ideal_amount?.toString() || "",
                due_date: editingGoal.due_date || "",
                priority: editingGoal.priority.toString(),
                image: null, // Always reset to null - we don't store existing image here
                current_amount: editingGoal.current_amount.toString(),
                selected_plan_ids: assignedPlanIds,
            });
        } else if (open && mode === "create") {
            setFormData({
                name: "",
                description: "",
                target_amount: "",
                ideal_amount: "",
                due_date: "",
                priority: "2",
                image: null, // Changed from "" to null
                current_amount: "0",
                selected_plan_ids: [],
            });
        }
    }, [open, mode, editingGoal, monthlyPlans]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault()

        if (!formData.name || !formData.target_amount) {
            return
        }

        const formDataToSend = new FormData()
        formDataToSend.append('name', formData.name)
        formDataToSend.append('description', formData.description)
        formDataToSend.append('target_amount', formData.target_amount)
        if (formData.ideal_amount) formDataToSend.append('ideal_amount', formData.ideal_amount)
        if (formData.due_date) formDataToSend.append('due_date', formData.due_date)
        formDataToSend.append('priority', formData.priority)

        // Handle image: only append if a new file was selected
        if (formData.image && formData.image instanceof File) {
            formDataToSend.append('image', formData.image)
        }

        if (mode === 'edit') formDataToSend.append('current_amount', formData.current_amount)

        try {
            if (mode === "edit" && editingGoal) {
                // Update the goal details first
                console.log('FormData contents:');
                for (let [key, value] of formDataToSend.entries()) {
                    console.log(key, value);
                }
                const response = await API.patch(`/goals/${editingGoal.id}/`, formDataToSend, {
                    headers: {
                        // Don't set Content-Type manually for FormData - let the browser set it
                        // This ensures proper boundary is included
                    },
                });

                // Handle plan linking/unlinking (these use JSON, so application/json)
                const currentPlanIds = editingGoal.monthly_plans?.map(plan => plan.id) || [];
                const selectedPlanIds = formData.selected_plan_ids;

                // Find plans to link (newly selected)
                const plansToLink = selectedPlanIds.filter(planId => !currentPlanIds.includes(planId));

                // Find plans to unlink (previously selected but now unchecked)
                const plansToUnlink = currentPlanIds.filter(planId => !selectedPlanIds.includes(planId));

                // Link new plans - use JSON content type
                for (const planId of plansToLink) {
                    try {
                        await API.post(`/goals/${editingGoal.id}/link-plan/`, {
                            plan_id: planId,
                            expected_amount: formData.target_amount,
                        }, {
                            headers: { "Content-Type": "application/json" },
                        });
                    } catch (error) {
                        console.error(`Error linking plan ${planId}:`, error);
                    }
                }

                // Unlink removed plans - use JSON content type
                for (const planId of plansToUnlink) {
                    try {
                        await API.post(`/goals/${editingGoal.id}/unlink-plan/`, {
                            plan_id: planId,
                        }, {
                            headers: { "Content-Type": "application/json" },
                        });
                    } catch (error) {
                        console.error(`Error unlinking plan ${planId}:`, error);
                    }
                }

                // Fetch the updated goal to get the latest state
                const updatedGoalResponse = await API.get(`/goals/${editingGoal.id}/`);
                onUpdateGoal(updatedGoalResponse.data);

            } else {
                // Create new goal (uses FormData)
                const response = await API.post("/goals/", formDataToSend);

                const newGoal = response.data;

                // Link selected plans to the new goal (uses JSON)
                for (const planId of formData.selected_plan_ids) {
                    try {
                        await API.post(`/goals/${newGoal.id}/link-plan/`, {
                            plan_id: planId,
                            expected_amount: formData.target_amount,
                        }, {
                            headers: { "Content-Type": "application/json" },
                        });
                    } catch (error) {
                        console.error(`Error linking plan ${planId} to new goal:`, error);
                    }
                }

                // Fetch the updated goal with linked plans
                const updatedGoalResponse = await API.get(`/goals/${newGoal.id}/`);
                onCreateGoal(updatedGoalResponse.data);
            }

            onOpenChange(false)
        } catch (error) {
            console.error('Error saving goal:', error)
            // You might want to show an error message to the user here
        }
    }

    const handleInputChange = (field: string, value: string) => {
        setFormData((prev) => ({ ...prev, [field]: value }))
    }

    // Fixed file input handler
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0] || null;
        setFormData((prev) => ({ ...prev, image: file }));
    }

    const handlePlanToggle = (planId: number, checked: boolean) => {
        setFormData((prev) => {
            const selected = new Set(prev.selected_plan_ids);
            if (checked) {
                selected.add(planId);
            } else {
                selected.delete(planId);
            }
            return { ...prev, selected_plan_ids: Array.from(selected) };
        });
    };

    const isEditing = mode === 'edit'

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="sm:max-w-[500px]">
                <DialogHeader>
                    <DialogTitle>
                        {isEditing ? 'Edit Goal' : 'Create New Goal'}
                    </DialogTitle>
                    <DialogDescription>
                        {isEditing
                            ? 'Update your financial goal details and track your progress.'
                            : 'Set up a new financial goal to track your progress and stay motivated.'
                        }
                    </DialogDescription>
                </DialogHeader>

                <form onSubmit={handleSubmit} className="space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="name">Goal Name *</Label>
                        <Input
                            id="name"
                            placeholder="e.g., Emergency Fund, Dream Vacation"
                            value={formData.name}
                            onChange={(e) => handleInputChange("name", e.target.value)}
                            required
                        />
                    </div>

                    <div className="space-y-2">
                        <Label htmlFor="description">Description</Label>
                        <Textarea
                            id="description"
                            placeholder="Describe your goal and why it's important to you"
                            value={formData.description}
                            onChange={(e) => handleInputChange("description", e.target.value)}
                            rows={3}
                        />
                    </div>

                    <div className="space-y-4">
                        <Label>Assign to Monthly Plans</Label>
                        <div className="border rounded-md p-3 max-h-32 overflow-y-auto">
                            {monthlyPlans.length === 0 ? (
                                <p className="text-sm text-muted-foreground">No monthly plans available</p>
                            ) : (
                                <div className="space-y-2">
                                    {monthlyPlans.map((plan) => {
                                        // When editing, check if this plan is linked to the goal
                                        const isLinkedToGoal = mode === 'edit' && editingGoal?.monthly_plans
                                            ? editingGoal.monthly_plans.some(linkedPlan => linkedPlan.id === plan.id)
                                            : false;

                                        return (
                                            <div key={plan.id} className="flex items-center space-x-2">
                                                <Checkbox
                                                    id={`plan-${plan.id}`}
                                                    checked={formData.selected_plan_ids.includes(plan.id)}
                                                    onCheckedChange={(checked) =>
                                                        handlePlanToggle(plan.id, checked as boolean)
                                                    }
                                                />
                                                <Label
                                                    htmlFor={`plan-${plan.id}`}
                                                    className="text-sm font-normal cursor-pointer"
                                                >
                                                    {plan.month}
                                                    {/* Show indicator if this plan is already linked to the goal */}
                                                    {isLinkedToGoal && (
                                                        <span className="ml-2 text-xs text-blue-600 font-medium">
                                                            (Currently linked)
                                                        </span>
                                                    )}
                                                </Label>
                                            </div>
                                        );
                                    })}
                                </div>
                            )}
                        </div>
                        <p className="text-xs text-muted-foreground">
                            Select multiple plans if this goal spans several months
                        </p>
                    </div>

                    <div className="space-y-2 w-1/2">
                        <Label htmlFor="target_amount">Target Amount *</Label>
                        <Input
                            id="target_amount"
                            type="number"
                            step="0.01"
                            min="0"
                            placeholder="0.00"
                            value={formData.target_amount}
                            onChange={(e) => handleInputChange("target_amount", e.target.value)}
                            required
                        />
                    </div>

                    {/* Show current amount field only when editing */}
                    {isEditing && (
                        <div className="space-y-2 w-1/2">
                            <Label htmlFor="current_amount">Current Amount</Label>
                            <Input
                                id="current_amount"
                                type="number"
                                step="0.01"
                                min="0"
                                placeholder="0.00"
                                value={formData.current_amount}
                                onChange={(e) => handleInputChange("current_amount", e.target.value)}
                            />
                        </div>
                    )}

                    <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <Label htmlFor="due_date">Due Date</Label>
                            <Input
                                id="due_date"
                                type="date"
                                value={formData.due_date}
                                onChange={(e) => handleInputChange("due_date", e.target.value)}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="priority">Priority</Label>
                            <Select value={formData.priority} onValueChange={(value) => handleInputChange("priority", value)}>
                                <SelectTrigger>
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="1">High Priority</SelectItem>
                                    <SelectItem value="2">Medium Priority</SelectItem>
                                    <SelectItem value="3">Low Priority</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                    </div>

                    <div className="space-y-2">
                        <Label htmlFor="image">
                            {isEditing ? 'Update Image (Optional)' : 'Image (Optional)'}
                        </Label>
                        <Input
                            id="image"
                            type="file"
                            accept="image/*"
                            onChange={handleFileChange}
                        />
                        {isEditing && editingGoal?.image && (
                            <p className="text-xs text-muted-foreground">
                                Current image will be kept if no new image is selected
                            </p>
                        )}
                    </div>

                    <DialogFooter>
                        <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                            Cancel
                        </Button>
                        <Button type="submit">
                            {isEditing ? 'Update Goal' : 'Create Goal'}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    )
}